<Window
	x:Class="RackDrawingApp.MainWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	
	xmlns:dc="clr-namespace:DrawingControl;assembly=DrawingControl"
	xmlns:local="clr-namespace:RackDrawingApp"
	
	xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
	xmlns:mdWPF="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf" 
	xmlns:mdConverters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
	
	TextElement.Foreground="{DynamicResource MaterialDesignBody}"
	TextElement.FontWeight="Medium"
	TextElement.FontSize="14"
	TextOptions.TextFormattingMode="Ideal" 
	TextOptions.TextRenderingMode="Auto"
	
	Background="{DynamicResource AppBackground}"
	FontFamily="{DynamicResource MaterialDesignFont}"
	
	Closing="Window_Closing"
	
	Title="{Binding WindowTitle, Mode=OneWay}"
	Icon="/DrawingFactoryApp;component/Properties/logo_1.ico"
	
	ResizeMode="NoResize"
	WindowState="Maximized"
	
	Height="1100"
	Width="1100"
	>

	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="CommonResources.xaml"/>
			</ResourceDictionary.MergedDictionaries>

			<local:ObjectTypeConverter x:Key="ObjectTypeConverter"/>
			<local:PalletTypeConverter x:Key="PalletTypeConverter"/>
			<local:RackToAdvancedInfoConverter x:Key="RackToAdvancedInfoConverter"/>
			<local:BracingTypeConverter x:Key="BracingTypeConverter"/>
			<local:CanSplitColumnConverter x:Key="CanSplitColumnConverter"/>
			<local:NullEmptyStringConverter x:Key="NullEmptyStringConverter"/>
			<local:PalletCommandsConverter x:Key="PalletCommandsConverter"/>

			<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
				<Setter Property="VerticalAlignment" Value="Center"/>
				<Setter Property="Margin" Value="8, 3, 8, 3"/>
			</Style>

			<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource AppTextBox}">
				<EventSetter Event="GotKeyboardFocus" Handler="TextBox_GotKeyboardFocus"/>
				<EventSetter Event="PreviewMouseLeftButtonDown" Handler="TextBox_PreviewMouseLeftButtonDown"/>
			</Style>

			<Style x:Key="DataGrid_TextBlock_Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
				<Setter Property="VerticalAlignment" Value="Center"/>
				<Setter Property="Margin" Value="8, 3, 8, 3"/>
			</Style>

			<Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
				<Setter Property="HorizontalAlignment" Value="Center" />
			</Style>

			<Style x:Key="PropertiesCommandButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CommandButtonStyle}">
				<Setter Property="Foreground" Value="{DynamicResource SecondaryAccentBrush}"/>
			</Style>

			<DataTemplate x:Key="Default_PropertyTemplate">
				<TextBox
					IsReadOnly="{Binding IsReadOnly}"
					Text="{Binding Value, Mode=TwoWay}"
					
					GotKeyboardFocus="TextBox_GotKeyboardFocus"
					PreviewMouseLeftButtonDown="TextBox_PreviewMouseLeftButtonDown"
					PreviewKeyDown="TextBox_PreviewKeyDown"
					
					KeyDown="TextBox_KeyDown"
					>
					<TextBox.Style>
						<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
							<Setter Property="IsEnabled" Value="True"/>
							<Style.Triggers>
								<DataTrigger Binding="{Binding IsReadOnly}" Value="True">
									<Setter Property="IsEnabled" Value="False"/>
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</TextBox.Style>
				</TextBox>
			</DataTemplate>

			<DataTemplate x:Key="Boolean_PropertyTemplate">
				<CheckBox
					VerticalAlignment="Center"
					
					IsChecked="{Binding Value, Mode=TwoWay}">
					<CheckBox.Style>
						<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
							<Setter Property="IsEnabled" Value="True"/>
							<Style.Triggers>
								<DataTrigger Binding="{Binding IsReadOnly}" Value="True">
									<Setter Property="IsEnabled" Value="False"/>
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</CheckBox.Style>
				</CheckBox>
			</DataTemplate>

			<DataTemplate x:Key="Combobox_PropertyTemplate">
				<ComboBox
					IsReadOnly="{Binding IsReadOnly}"
					Text="{Binding Value, Mode=TwoWay}"
					ItemsSource="{Binding StandardValues}">
					<ComboBox.Style>
						<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
							<Setter Property="IsEnabled" Value="True"/>
							<Style.Triggers>
								<DataTrigger Binding="{Binding IsReadOnly}" Value="True">
									<Setter Property="IsEnabled" Value="False"/>
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</ComboBox.Style>
				</ComboBox>
			</DataTemplate>

			<local:PropertyTemplateSelector
				x:Key="PropertyTemplateSelector_Key"
				
				DefaultTemplate="{StaticResource Default_PropertyTemplate}"
				BooleanTemplate="{StaticResource Boolean_PropertyTemplate}"
				ComboboxTemplate="{StaticResource Combobox_PropertyTemplate}"
				/>

			<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource AppComboBox}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ComboBox}">
							<Grid
								x:Name="templateRoot"
								Background="{TemplateBinding Background}"
								SnapsToDevicePixels="True">
								<Grid x:Name="InnerRoot">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
									</Grid.ColumnDefinitions>
									<ToggleButton
										x:Name="toggleButton"
										Grid.ColumnSpan="2"
										Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
										Style="{StaticResource MaterialDesignComboBoxToggleButton}"/>
									<Grid
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Margin="{TemplateBinding Padding}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
										<Grid
											x:Name="InputRoot"
											HorizontalAlignment="Left">
											<ContentPresenter x:Name="contentPresenter"
												Content="{TemplateBinding SelectedItem}"
												ContentTemplate="{TemplateBinding ItemTemplate}"
												ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
												ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
												IsHitTestVisible="False"/>
											<TextBox x:Name="PART_EditableTextBox"
												IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
												HorizontalAlignment="Left"
												HorizontalContentAlignment="Stretch"
												Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
												CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"                                 
												Visibility="Collapsed" />

											<mdWPF:SmartHint
												x:Name="Hint"
												HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static mdConverters:HintProxyFabricConverter.Instance}}"
												FontSize="{TemplateBinding FontSize}"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
												UseFloating="{Binding Path=(mdWPF:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
												FloatingScale="{Binding Path=(mdWPF:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
												FloatingOffset="{Binding Path=(mdWPF:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"                                               
												HintOpacity="{Binding Path=(mdWPF:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
												Hint="{TemplateBinding mdWPF:HintAssist.Hint}" />
										</Grid>
									</Grid>
									<Line
										x:Name="DashedLine" Grid.ColumnSpan="2" VerticalAlignment="Bottom"
										Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource InverseBoolToVisConverter}}"
										StrokeThickness="1.25" StrokeDashArray="1,2.5" StrokeDashCap="Round"
										X1="0" X2="{Binding ActualWidth, ElementName=toggleButton}" Y1="0" Y2="0" 
										Stroke="{TemplateBinding BorderBrush}" Opacity="0.56" />
									<mdWPF:Underline
										x:Name="Underline"
										Grid.ColumnSpan="2"
										IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
										Visibility="{Binding Path=(mdWPF:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"/>

									<mdWPF:ComboBoxPopup
										x:Name="PART_Popup"
										AllowsTransparency="true"
										Focusable="False"
										HorizontalOffset="-11.5"
										IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
										PlacementTarget="{Binding ElementName=templateRoot}"
										SnapsToDevicePixels="True"
										UseLayoutRounding="True"
										Placement="Custom"
										PopupAnimation="Fade"
										VerticalOffset="0"
										DefaultVerticalOffset="5"
										DownVerticalOffset="-15.5"
										UpVerticalOffset="15"
										ClassicMode="{Binding Path=(mdWPF:ComboBoxAssist.ClassicMode), RelativeSource={RelativeSource TemplatedParent}}"
										UpContentTemplate="{StaticResource PopupContentUpTemplate}"
										DownContentTemplate="{StaticResource PopupContentDownTemplate}"
										ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}">
										<ContentControl>
											<ScrollViewer
													MaxHeight="{TemplateBinding MaxDropDownHeight}"
													Background="{Binding Background, ElementName=PART_Popup}">
												<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
											</ScrollViewer>
										</ContentControl>
									</mdWPF:ComboBoxPopup>
								</Grid>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger SourceName="PART_Popup" Property="PopupPlacement" Value="{x:Static materialDesign:ComboBoxPopupPlacement.Classic}">
									<Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
								</Trigger>
								<Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
									<Setter Property="Background" TargetName="templateRoot" Value="{Binding Background, ElementName=PART_Popup}" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
									<Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
								</Trigger>
								<Trigger Property="IsEditable" Value="True">
									<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
									<Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(mdWPF:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
									<Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
								</Trigger>
								<Trigger Property="mdWPF:HintAssist.IsFloating" Value="True">
									<Setter TargetName="InnerRoot" Property="Margin" Value="0 11.5 0 0" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsEditable" Value="False"/>
										<Condition Property="IsDropDownOpen" Value="True"/>
									</MultiTrigger.Conditions>
									<Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
									<Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
										<Condition Property="mdWPF:HintAssist.IsFloating" Value="True" />
										<Condition Property="IsKeyboardFocusWithin" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
									<Setter TargetName="Hint" Property="HintOpacity" Value="1" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="mdWPF:HintAssist.IsFloating" Value="True" />
										<Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
										<Condition Property="IsKeyboardFocusWithin" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
									<Setter TargetName="Hint" Property="HintOpacity" Value="1" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
										<Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
									<Setter TargetName="Hint" Property="HintOpacity" Value="1" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
										<Condition Property="IsDropDownOpen" Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
									<Setter TargetName="Hint" Property="HintOpacity" Value="1" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsGrouping" Value="true" />
										<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
									</MultiTrigger.Conditions>
									<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
								</MultiTrigger>
								<Trigger Property="IsKeyboardFocused" Value="true">
									<Setter TargetName="Underline" Property="IsActive" Value="True"/>
								</Trigger>
								<Trigger Property="Validation.HasError" Value="true">
									<Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
									<Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="Validation.HasError" Value="true" />
									</MultiTrigger.Conditions>
									<Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
									<Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="true" />
										<Condition Property="Validation.HasError" Value="false" />
									</MultiTrigger.Conditions>
									<Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
									<Setter TargetName="Underline" Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
								</MultiTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Window.Resources>

	<materialDesign:DialogHost
		x:Name="DlgHost">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="auto"/>
				<ColumnDefinition Width="*"/>
			</Grid.ColumnDefinitions>

			<Grid.RowDefinitions>
				<RowDefinition Height="auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<!--
			Display DrawControl first, so top toolbar shadow can overlay it.
			-->
			<dc:DrawingControl
				x:Name="Drawing"
				
				Grid.Row="1"
				Grid.Column="1"
				
				Margin="24"
				
				VerticalAlignment="Center"
				HorizontalAlignment="Center"
				
				Sheet="{Binding CurrentDocument.CurrentSheet, Mode=OneWay}"
				WatermarkImage="/DrawingFactoryApp;component/Properties/Watermark.png"
				
				TooltipBackgroundBrush="{DynamicResource MaterialDesignToolTipBackground}"
				TooltipTextBrush="{DynamicResource AppBackground}"
				
				BorderBrush="{DynamicResource DrawingAreaBorder}"
				SnappingLinesBrush="{DynamicResource DrawingAreaSnappingLines}"
				
				SelectionRectangleFillBrush="{DynamicResource DrawingAreaSelectionRectangleFill}"
				SelectionRectangleBorderBrush="{DynamicResource DrawingAreaSelectionRectangleBorder}"
				SelectedGeometryInfoBrush="{DynamicResource DrawingAreaSelectedGeometryInfoBrush}"
				
				SheetBackgroundBrush="{DynamicResource DrawingAreaSheetBackgroundBrush}"
				
				NewSizePreviewFillBrush="{DynamicResource DrawingAreaNewSizePreviewFillBrush}"
				NewSizePreviewBorderBrush="{DynamicResource DrawingAreaNewSizePreviewBorderBrush}"
				>
				<dc:DrawingControl.Style>
					<Style TargetType="{x:Type dc:DrawingControl}">
						<Setter Property="Visibility" Value="Visible"/>
						<Setter Property="IsEnabled" Value="True"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding Path=IsOpen, ElementName=DlgHost}" Value="True">
								<Setter Property="IsEnabled" Value="False"/>
							</DataTrigger>
							<DataTrigger Binding="{Binding CurrentDocument.ShowAdvancedProperties}" Value="True">
								<Setter Property="Visibility" Value="Hidden"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</dc:DrawingControl.Style>
			</dc:DrawingControl>

			<dc:SheetMinimapControl
				Grid.Row="1"
				Grid.Column="1"
				
				MaxWidth="150"
				MaxHeight="150"
				
				IsHitTestVisible="False"
				
				Margin="24"
				Opacity="0.7"
				
				VerticalAlignment="Top"
				HorizontalAlignment="Right"
				
				Sheet="{Binding CurrentDocument.CurrentSheet, Mode=OneWay}"
				BorderBrush="{DynamicResource PrimaryHueMidBrush}"
				BackgroundBrush="{DynamicResource AppBackground}"
				CameraAreaBrush="{DynamicResource PrimaryHueMidBrush}"
				>
				<dc:SheetMinimapControl.Style>
					<Style TargetType="{x:Type dc:SheetMinimapControl}">
						<Setter Property="Visibility" Value="Visible"/>
						<Style.Triggers>
							
							<DataTrigger Binding="{Binding Path=Visibility, ElementName=Viewport3DBorder}" Value="Visible">
								<Setter Property="Visibility" Value="Hidden"/>
							</DataTrigger>

							<DataTrigger Binding="{Binding CurrentDocument.ShowAdvancedProperties}" Value="True">
								<Setter Property="Visibility" Value="Hidden"/>
							</DataTrigger>

						</Style.Triggers>
					</Style>
				</dc:SheetMinimapControl.Style>
			</dc:SheetMinimapControl>

			<!--
			Selected rack advanced properties picture
			-->
			<dc:RackAdvancedPropertiesControl
				Grid.Row="1"
				Grid.Column="1"
				
				Margin="24"
				
				VerticalAlignment="Stretch"
				HorizontalAlignment="Stretch"
				
				Document="{Binding CurrentDocument, Mode=OneWay}"
				WatermarkImage="/DrawingFactoryApp;component/Properties/Watermark.png"
				>
				<dc:RackAdvancedPropertiesControl.Style>
					<Style TargetType="{x:Type dc:RackAdvancedPropertiesControl}">
						<Setter Property="Visibility" Value="Hidden"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding CurrentDocument.ShowAdvancedProperties}" Value="True">
								<Setter Property="Visibility" Value="Visible"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</dc:RackAdvancedPropertiesControl.Style>
			</dc:RackAdvancedPropertiesControl>
			<!--
			Selected rack warning icon
			-->
			<Grid
				Grid.Row="1"
				Grid.Column="1"
				Margin="24"
				
				VerticalAlignment="Top"
				HorizontalAlignment="Left"

				Background="Transparent"
				>
				<Grid.Style>
					<Style TargetType="{x:Type Grid}">
						<Setter Property="Visibility" Value="Hidden"/>
						<Style.Triggers>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition Binding="{Binding CurrentDocument.ShowAdvancedProperties}" Value="True"/>
									<Condition Binding="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.WarningMessage, Mode=OneWay, Converter={StaticResource NullEmptyStringConverter}}" Value="False"/>
								</MultiDataTrigger.Conditions>
								<MultiDataTrigger.Setters>
									<Setter Property="Visibility" Value="Visible"/>
								</MultiDataTrigger.Setters>
							</MultiDataTrigger>
						</Style.Triggers>
					</Style>
				</Grid.Style>
				
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>

				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"/>
					<!--
					<RowDefinition Height="{StaticResource HorizontalGutter}"/>
					-->
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>

				<!--
				row 0
				warning picture
				-->
				<Border
					Grid.Row="0"
					HorizontalAlignment="Center"
					
					BorderThickness="0"
					Background="Transparent"
					
					ToolTip="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.WarningMessage}"
					ToolTipService.InitialShowDelay="0"
					ToolTipService.ShowDuration="99999"
					>
					<Border.Resources>
						<Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Type ToolTip}}">
							<Setter Property="FontSize" Value="14"/>
						</Style>
					</Border.Resources>
					<materialDesign:PackIcon
						Width="48"
						Height="48"
						
						Kind="WarningOutline"
						Foreground="{DynamicResource AppWarningBackground}"
						/>
				</Border>
				
				<!--
				row 1
				horizontal gutter
				-->
				
				<!--
				row 2
				text
				-->
				<TextBlock
					Grid.Row="1"
					VerticalAlignment="Center"
					HorizontalAlignment="Center"
					Opacity="0.4"
					Text="Place mouse over"
					/>
			</Grid>
				

			<!-- SAVE LOAD and CREATE buttons-->
			<materialDesign:Card
				Grid.Row="0"
				Grid.ColumnSpan="2"
				
				Margin="0"
				materialDesign:ShadowAssist.ShadowDepth="Depth2"
				>
				
				<Grid
					Margin="8, 3, 8, 3">

					<Grid.RowDefinitions>
						<RowDefinition Height="auto"/>
						<RowDefinition Height="auto"/>
					</Grid.RowDefinitions>

					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="auto"/>
					</Grid.ColumnDefinitions>

					<WrapPanel
						Grid.Row="0"
						Grid.Column="0"
						
						Margin="0, 0, 0, 10"
						VerticalAlignment="Center"
						Orientation="Horizontal">

						<ItemsControl
							Margin="0, 0, 24, 0"
							ItemsSource="{Binding Commands}"
							>
							<ItemsControl.Style>
								<Style TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource CommandsToolbarStyle}">
									<Setter Property="IsEnabled" Value="True"/>
									<Style.Triggers>
										<DataTrigger Binding="{Binding CurrentDocument.IsInCommand}" Value="True">
											<Setter Property="IsEnabled" Value="False"/>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ItemsControl.Style>
						</ItemsControl>

						<Grid
							HorizontalAlignment="Left"
							Margin="8, 0, 0, 0"
							>

							<StackPanel
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Orientation="Horizontal">

								<StackPanel.Resources>

									<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
										<Setter Property="VerticalAlignment" Value="Center"/>
										<Setter Property="VerticalContentAlignment" Value="Center"/>
										<Setter Property="IsEnabled" Value="True"/>
										<Style.Triggers>
											<DataTrigger Binding="{Binding CurrentDocument.IsInCommand}" Value="True">
												<Setter Property="IsEnabled" Value="False"/>
											</DataTrigger>

											<DataTrigger Binding="{Binding CurrentDocument.ShowAdvancedProperties}" Value="True">
												<Setter Property="IsEnabled" Value="False"/>
											</DataTrigger>
										</Style.Triggers>
									</Style>

									<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignSubheadingTextBlock}">
										<Setter Property="VerticalAlignment" Value="Center"/>
										<Setter Property="FontSize" Value="18"/>
										<Setter Property="Opacity" Value="0.75"/>
									</Style>

								</StackPanel.Resources>

								<TextBlock
									Text="Length:"/>
								<TextBox
									Margin="6, 0, 0, 0"
									Text="{Binding CurrentDocument.CurrentSheet.Length, Mode=TwoWay}"/>

								<TextBlock
									Margin="24, 0, 0, 0"
									Text="Width:"/>
								<TextBox
									Margin="6, 0, 0, 0"
									Text="{Binding CurrentDocument.CurrentSheet.Width, Mode=TwoWay}"/>

								<!--
								Show States count only in DEBUG
								-->
								<TextBlock
									Margin="52, 0, 0, 0"
									Text="States count:">
									<TextBlock.Style>
										<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
											<Setter Property="Visibility" Value="Collapsed"/>
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsItDEBUG}" Value="True">
													<Setter Property="Visibility" Value="Visible"/>
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</TextBlock.Style>
								</TextBlock>
								<TextBlock
									Margin="6, 0, 0, 0"
									Text="{Binding CurrentDocument.StatesCount, Mode=OneWay}">
									<TextBlock.Style>
										<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
											<Setter Property="Visibility" Value="Collapsed"/>
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsItDEBUG}" Value="True">
													<Setter Property="Visibility" Value="Visible"/>
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</TextBlock.Style>
								</TextBlock>

								<!--
								Show build version only in DEBUG
								-->
								<TextBlock
									Margin="52, 0, 0, 0"
									Foreground="Salmon"
									Text="{Binding ApplicationVersion, Mode=OneWay}">
									<TextBlock.Style>
										<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
											<Setter Property="Visibility" Value="Collapsed"/>
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsItDEBUG}" Value="True">
													<Setter Property="Visibility" Value="Visible"/>
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</TextBlock.Style>
								</TextBlock>
								
								<!--
								Mouse global point
								-->
								<TextBlock
									Margin="52, 0, 0, 0"
									Text="{Binding MouseGlobalPoint, ElementName=Drawing, Mode=OneWay, StringFormat=Mouse: {0}}">
									<TextBlock.Style>
										<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
											<Setter Property="Visibility" Value="Collapsed"/>
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsItDEBUG}" Value="True">
													<Setter Property="Visibility" Value="Visible"/>
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</TextBlock.Style>
								</TextBlock>

								<!--
								Temporary vector
								-->
								<!--
								<TextBlock
									Margin="52, 0, 0, 0"
									Text="{Binding CurrentDocument.CurrentSheet.TemporaryCameraOffset, Mode=OneWay, StringFormat=Temp: {0}}"/>
								-->

							</StackPanel>

						</Grid>

					</WrapPanel>

					<ListBox
						Grid.Row="1"
						Grid.Column="0"
						
						SelectedIndex="0"
						SelectedItem="{Binding CurrentDocument.CurrentSheet, Mode=TwoWay}"
						ItemsSource="{Binding CurrentDocument.Sheets, Mode=OneWay}">

						<ListBox.ItemsPanel>
							<ItemsPanelTemplate>
								<StackPanel Orientation="Horizontal" />
							</ItemsPanelTemplate>
						</ListBox.ItemsPanel>

						<ListBox.ItemContainerStyle>
							<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
								<!--
								Too big padding on Ripple - wrap around ListBoxItemTemplate. Disable it.
								I want draw selection line at ListBoxItem bottom without any padding.
								Look at ItemTemplate.
								-->
								<Setter Property="Padding" Value="0"/>
								<!--
								I dont want to change ListBoxItem background color when it selected.
								But if you look inside default ListBoxItem style - MaterialDesignListBoxItem,
								you wil see that it have Border named "SelectedBorder" with Background={Binding Foreground...}.
								This border is invisible(Opacity=0) by default.
								But when item was selected border's opacity changes to 0.18 inside "Selected" visual state.
								
								For disable changing item background on selection without override ListBoxItem.ControlTemplate
								lets set ListBoxItem.Foreground="Transparent". But all text inside ListBoxItem now will have
								transparent foreground, so return TextBlock.Foreground to MaterialDesign foreground brush inside
								ItemTemplate.
								-->
								<Setter Property="Foreground" Value="Transparent"/>
								<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
							</Style>
						</ListBox.ItemContainerStyle>

						<ListBox.ItemTemplate>
							<DataTemplate DataType="{x:Type dc:DrawingSheet}">
								<Grid Margin="0, 0, 0, 0">
									<Grid.RowDefinitions>
										<RowDefinition Height="auto"/>
										<RowDefinition Height="auto"/>
										<RowDefinition Height="auto"/>
									</Grid.RowDefinitions>

									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="auto"/>
										<ColumnDefinition Width="auto"/>
									</Grid.ColumnDefinitions>

									<Button
										Grid.Row="0"
										Grid.Column="1"
										
										Margin="0, 0, 16, 0"
										Padding="0"
										
										Width="12"
										Height="12"
										
										Click="CloseSheettButton_Click"
										IsEnabled="{Binding Path=DataContext.CurrentDocument.IsCloseSheetButtonEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
										>
										<Viewbox
											Stretch="Uniform"
											StretchDirection="DownOnly"
											>
											<materialDesign:PackIcon Kind="WindowClose" />
										</Viewbox>
									</Button>
									
									<TextBlock
										Grid.Row="1"
										Grid.Column="0"
										
										Margin="16, 0, 0, 4"
										VerticalAlignment="Center"
										
										Foreground="{DynamicResource MaterialDesignBody}"
										MouseLeftButtonDown="SheetTextBlock_MouseLeftButtonDown"
										Text="{Binding DisplayName, Mode=OneWay}"/>

									<Border
										Grid.Row="2"
										Grid.Column="0"
										Grid.ColumnSpan="2"
										
										Padding="0 4 0 0"
										CornerRadius="2"
										>
										<Border.Style>
											<Style TargetType="{x:Type Border}">
												<Setter Property="Background" Value="Transparent"/>
												<Style.Triggers>
													<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
														<Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}"/>
													</DataTrigger>
												</Style.Triggers>
											</Style>
										</Border.Style>
									</Border>
								</Grid>
							</DataTemplate>
						</ListBox.ItemTemplate>

					</ListBox>

					<Image
						Grid.Row="0"
						Grid.RowSpan="2"
						Grid.Column="2"
						
						MaxHeight="84"
						MaxWidth="400"
						Margin="8, 0, 8, 0"
						
						VerticalAlignment="Center"
						HorizontalAlignment="Center"
						
						Source="/DrawingFactoryApp;component/Properties/Logo_DevelopedBy.TIF"
						/>

				</Grid>
			</materialDesign:Card>

			<!--PROPS and STATS-->
			<Grid
				Grid.Row="1"
				Grid.Column="0"
				
				Margin="-6, 6, 6, 6"
				>

				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="auto"/>
					<ColumnDefinition Width="auto"/>
				</Grid.ColumnDefinitions>

				<materialDesign:Card
					Grid.Row="0"
					Grid.Column="0"
					
					HorizontalAlignment="Left"
					VerticalAlignment="Stretch"
					
					Padding="6, 0, 0, 0"
					>

					<Expander
						ExpandDirection="Left"
						IsExpanded="False"
						
						VerticalAlignment="Stretch"
						VerticalContentAlignment="Stretch"
						
						Background="Transparent"
						>

						<Expander.Header>
							<TextBlock Text="Properties &amp; Statistics" RenderTransformOrigin=".5,.5">
								<TextBlock.LayoutTransform>
									<RotateTransform Angle="-90" />
								</TextBlock.LayoutTransform>
							</TextBlock>
						</Expander.Header>

						<Grid
							Width="320"
							Margin="12, 12, 0, 12"
							>

							<!--Simple properties and rack statistics-->
							<Grid>

								<Grid.Style>
									<Style TargetType="{x:Type Grid}">
										<Setter Property="Visibility" Value="Visible"/>
										<Style.Triggers>
											<DataTrigger Binding="{Binding CurrentDocument.ShowAdvancedProperties}" Value="True">
												<Setter Property="Visibility" Value="Collapsed"/>
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Grid.Style>

								<Grid.RowDefinitions>
									<RowDefinition Height="auto"/>
									<RowDefinition Height="*"/>
									<RowDefinition Height="auto"/>
									<RowDefinition Height="auto"/>
									<RowDefinition Height="0.5*"/>
									<RowDefinition Height="auto"/>
									<RowDefinition Height="0.4*"/>
								</Grid.RowDefinitions>

								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="auto"/>
								</Grid.ColumnDefinitions>

								<!--
								ROW 0
								SIMPLE PROPERTIES HEADER and ADVANCE PROPERTIES BUTTON
								-->
								<TextBlock
										Grid.Row="0"
										Grid.Column="0"
										
										Margin="0, 0, 0, 3"
										HorizontalAlignment="Left"
										VerticalAlignment="Center"
										
										Style="{DynamicResource MaterialDesignHeadlineTextBlock}"
										Foreground="{DynamicResource SecondaryAccentBrush}"
										Text="Properties"/>
								<Button
										Grid.Row="0"
										Grid.Column="1"
										
										ToolTip="Advanced properties"
										
										Click="AdvancedPropertiesButton_Click"
										>

									<Button.Style>
										<Style TargetType="{x:Type Button}" BasedOn="{StaticResource PropertiesCommandButtonStyle}">
											<Setter Property="Visibility" Value="Hidden"/>
											<Style.Triggers>
												<MultiDataTrigger>
													<MultiDataTrigger.Conditions>
														<Condition Binding="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry, Converter={StaticResource ObjectTypeConverter}}" Value="{x:Type dc:Rack}"/>
													</MultiDataTrigger.Conditions>
													<Setter Property="Visibility" Value="Visible"/>
												</MultiDataTrigger>
											</Style.Triggers>
										</Style>
									</Button.Style>

									<materialDesign:PackIcon
										Kind="Settings"
										Style="{StaticResource PackIcon_Style}"
										/>
								</Button>

								<!--
								ROW 1
								SIMPLE PROPERTIES LIST
								-->
								<ListBox
										Grid.Row="1"
										Grid.Column="0"
										Grid.ColumnSpan="2"
										
										Grid.IsSharedSizeScope="True"
										VerticalAlignment="Stretch"
										HorizontalAlignment="Stretch"
										
										Margin="16, 3, 0, 32"
										
										Background="Transparent"
										ItemsSource="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.PropertiesCollection}"
										
										KeyboardNavigation.IsTabStop="False"
										KeyboardNavigation.TabNavigation="Cycle"
										KeyboardNavigation.ControlTabNavigation="Cycle"
										KeyboardNavigation.DirectionalNavigation="Cycle"
										>

									<ListBox.GroupStyle>
										<GroupStyle>
											<GroupStyle.HeaderTemplate>
												<DataTemplate>
													<TextBlock
														Margin="0, 3, 0, 3"
														
														Text="{Binding Name}"
														Foreground="{DynamicResource SecondaryAccentBrush}"
														Opacity="0.8"
														/>
												</DataTemplate>
											</GroupStyle.HeaderTemplate>
										</GroupStyle>
									</ListBox.GroupStyle>

									<ListBox.ItemContainerStyle>
										<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
											<Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
											<Setter Property="Background" Value="Transparent"/>
										</Style>
									</ListBox.ItemContainerStyle>

									<ListBox.ItemTemplate>
										<DataTemplate>
											<Border>
												<Grid>
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="Auto" SharedSizeGroup="PropertyName"/>
														<ColumnDefinition Width="Auto" SharedSizeGroup="PropertyValue" />
													</Grid.ColumnDefinitions>

													<Grid.RowDefinitions>
														<RowDefinition Height="Auto"/>
													</Grid.RowDefinitions>

													<TextBlock
															Grid.Column="0"
															
															Margin="0, 0, 16, 0"
															VerticalAlignment="Center"
															
															KeyboardNavigation.IsTabStop="False"
															
															Text="{Binding Name}"
															TextWrapping="Wrap"
															MaxWidth="150"
															/>

													<ContentPresenter
															Grid.Column="2"
															ContentTemplateSelector="{StaticResource PropertyTemplateSelector_Key}"
															
															Margin="16, 0, 16, 0"
															VerticalAlignment="Center"
															
															Content="{Binding .}"
															/>
												</Grid>
											</Border>
										</DataTemplate>
									</ListBox.ItemTemplate>
								</ListBox>
								<!--
								Display it in DEBUG only
								RACKS SIZES INDEXES
								-->
								<!--
								<ScrollViewer
									Grid.Row="1"
									Grid.Column="0"
									Grid.ColumnSpan="2"
									
									HorizontalScrollBarVisibility="Auto"
									VerticalScrollBarVisibility="Auto"
									
									Margin="16, 3, 0, 0"
									>
									<ScrollViewer.Style>
										<Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource {x:Type ScrollViewer}}">
											<Setter Property="Visibility" Value="Collapsed"/>
											<Style.Triggers>
												<DataTrigger Binding="{Binding IsItDEBUG}" Value="True">
													<Setter Property="Visibility" Value="Visible"/>
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</ScrollViewer.Style>

									<DataGrid
										KeyboardNavigation.IsTabStop="False"
										KeyboardNavigation.TabNavigation="None"
										KeyboardNavigation.ControlTabNavigation="None"
										KeyboardNavigation.DirectionalNavigation="None"
										KeyboardNavigation.AcceptsReturn="False"
										
										materialDesign:DataGridAssist.CellPadding="4 2 2 2"
										materialDesign:DataGridAssist.ColumnHeaderPadding="4 2 2 2"
										
										CanUserAddRows="False"
										AutoGenerateColumns="False"
										
										HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										
										ScrollViewer.CanContentScroll="True" 
										ScrollViewer.VerticalScrollBarVisibility="Auto"
										ScrollViewer.HorizontalScrollBarVisibility="Auto"
										
										ItemsSource="{Binding CurrentDocument.RacksSizesCollection}">

										<DataGrid.CellStyle>
											<Style TargetType="{x:Type DataGridCell}">
												<Setter Property="Foreground" Value="Black" />
												<Style.Triggers>
													<Trigger Property="IsSelected" Value="True">
														<Setter Property="Background" Value="{x:Null}" />
														<Setter Property="BorderBrush" Value="{x:Null}" />
													</Trigger>
												</Style.Triggers>
											</Style>
										</DataGrid.CellStyle>

										<DataGrid.Columns>
											<DataGridTextColumn
												Binding="{Binding SizeIndex}"
												Header="#"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

											<DataGridTextColumn
												Binding="{Binding LengthX}"
												Header="Length X"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

											<DataGridTextColumn
												Binding="{Binding Count}"
												Header="Count"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

										</DataGrid.Columns>

									</DataGrid>
								</ScrollViewer>
								-->

								<!--
								ROW 2
								STATISTICS HEADER
								-->
								<TextBlock
										Grid.Row="2"
										Grid.Column="0"
										Grid.ColumnSpan="2"
										
										Margin="0, 16, 0, 12"
										HorizontalAlignment="Left"
										VerticalAlignment="Center"
										
										Style="{DynamicResource MaterialDesignHeadlineTextBlock}"
										Foreground="{DynamicResource SecondaryAccentBrush}"
										Text="Statistics"/>

								<!--
								ROW 3 and 4
								RACKS STATISTIC
								-->
								<TextBlock
										Grid.Row="3"
										Grid.Column="0"
										Grid.ColumnSpan="2"
										
										Opacity="0.7"
										Text="Racks"
										FontWeight="Regular"
										Style="{DynamicResource MaterialDesignTitleTextBlock}"
										Foreground="{DynamicResource SecondaryAccentBrush}"
										Margin="16, 3, 0, 0"
										/>
								<ScrollViewer
										Grid.Row="4"
										Grid.Column="0"
										Grid.ColumnSpan="2"
										
										HorizontalScrollBarVisibility="Auto"
										VerticalScrollBarVisibility="Auto"
										
										Margin="16, 3, 0, 0"
										>

									<DataGrid
										Grid.Row="1"
										
										KeyboardNavigation.IsTabStop="False"
										KeyboardNavigation.TabNavigation="None"
										KeyboardNavigation.ControlTabNavigation="None"
										KeyboardNavigation.DirectionalNavigation="None"
										KeyboardNavigation.AcceptsReturn="False"
										
										materialDesign:DataGridAssist.CellPadding="4 2 2 2"
										materialDesign:DataGridAssist.ColumnHeaderPadding="4 2 2 2"
										Background="Transparent"
										HorizontalGridLinesBrush="{DynamicResource MaterialDesignDivider}"
										
										ItemsSource="{Binding CurrentDocument.CurrentSheet.StatisticsCollection}"
										CanUserAddRows="False"
										AutoGenerateColumns="False"
										
										HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										
										ScrollViewer.CanContentScroll="True" 
										ScrollViewer.VerticalScrollBarVisibility="Auto"
										ScrollViewer.HorizontalScrollBarVisibility="Auto"
										>

										<DataGrid.CellStyle>
											<Style TargetType="{x:Type DataGridCell}">
												<Setter Property="Foreground">
													<Setter.Value>
														<SolidColorBrush Color="{Binding ForegroundColor, Mode=OneWay}"/>
													</Setter.Value>
												</Setter>
												<Style.Triggers>
													<Trigger Property="IsSelected" Value="True">
														<Setter Property="Background" Value="{x:Null}" />
														<Setter Property="BorderBrush" Value="{x:Null}" />
													</Trigger>
												</Style.Triggers>
											</Style>
										</DataGrid.CellStyle>

										<DataGrid.RowStyle>
											<Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
												<Setter Property="Background">
													<Setter.Value>
														<SolidColorBrush Color="{Binding BackgroundColor, Mode=OneWay}"/>
													</Setter.Value>
												</Setter>
												<Style.Triggers>
													<Trigger Property="IsSelected" Value="True">
														<Setter Property="Background">
															<Setter.Value>
																<SolidColorBrush Color="{Binding BackgroundColor, Mode=OneWay}"/>
															</Setter.Value>
														</Setter>
													</Trigger>
													<Trigger Property="IsMouseOver" Value="True">
														<Setter Property="Background">
															<Setter.Value>
																<SolidColorBrush Color="{Binding BackgroundColor, Mode=OneWay}"/>
															</Setter.Value>
														</Setter>
													</Trigger>
												</Style.Triggers>
											</Style>
										</DataGrid.RowStyle>

										<DataGrid.Columns>
											<!--INDEX-->
											<DataGridTextColumn
													Binding="{Binding DisplayIndex}"
													Header="#"
													IsReadOnly="True"
													ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
													/>

											<!--TYPE-->
											<DataGridTemplateColumn
													Header="Type"
													IsReadOnly="True">
												<DataGridTemplateColumn.CellTemplate>
													<DataTemplate>
														<Grid>
															<Grid.RowDefinitions>
																<RowDefinition Height="*"/>
																<RowDefinition Height="*"/>
															</Grid.RowDefinitions>

															<TextBlock
																	Grid.Row="0"
																	Text="{Binding Name_M}"
																	Style="{StaticResource DataGrid_TextBlock_Style}"
																	/>

															<TextBlock
																	Grid.Row="1"
																	Text="{Binding Name_A}"
																	Style="{StaticResource DataGrid_TextBlock_Style}"
																	/>

														</Grid>
													</DataTemplate>
												</DataGridTemplateColumn.CellTemplate>
											</DataGridTemplateColumn>

											<!--Length-->
											<DataGridTemplateColumn
															Header="L"
															IsReadOnly="True">
												<DataGridTemplateColumn.CellTemplate>
													<DataTemplate>
														<Grid>
															<Grid.RowDefinitions>
																<RowDefinition Height="*"/>
																<RowDefinition Height="*"/>
															</Grid.RowDefinitions>

															<TextBlock
																	Grid.Row="0"
																	Text="{Binding Length_M}"
																	Style="{StaticResource DataGrid_TextBlock_Style}"
																	/>

															<TextBlock
																	Grid.Row="1"
																	Text="{Binding Length_A}"
																	Style="{StaticResource DataGrid_TextBlock_Style}"
																	/>

														</Grid>
													</DataTemplate>
												</DataGridTemplateColumn.CellTemplate>
											</DataGridTemplateColumn>

											<!--Width-->
											<DataGridTextColumn
													Binding="{Binding Width}"
													Header="D"
													IsReadOnly="True"
													ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
													/>

											<!--Height-->
											<DataGridTextColumn
													Binding="{Binding Height}"
													Header="H"
													IsReadOnly="True"
													ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
													/>

											<!--Count-->
											<DataGridTemplateColumn
													Header="Q"
													IsReadOnly="True">
												<DataGridTemplateColumn.CellTemplate>
													<DataTemplate>
														<Grid>
															<Grid.RowDefinitions>
																<RowDefinition Height="*"/>
																<RowDefinition Height="*"/>
															</Grid.RowDefinitions>

															<TextBlock
																	Grid.Row="0"
																	Text="{Binding Count_M}"
																	Style="{StaticResource DataGrid_TextBlock_Style}"
																	/>

															<TextBlock
																	Grid.Row="1"
																	Text="{Binding Count_A}"
																	Style="{StaticResource DataGrid_TextBlock_Style}"
																	/>

														</Grid>
													</DataTemplate>
												</DataGridTemplateColumn.CellTemplate>
											</DataGridTemplateColumn>

										</DataGrid.Columns>

									</DataGrid>
								</ScrollViewer>

								<!--
								ROW 5 and 6
								PALLETS STATISTIC
								-->
								<TextBlock
									Grid.Row="5"
									Grid.Column="0"
									Grid.ColumnSpan="2"
									
									Margin="16, 16, 0, 0"
									
									Opacity="0.7"
									Text="Pallets"
									FontWeight="Regular"
									Style="{DynamicResource MaterialDesignTitleTextBlock}"
									Foreground="{DynamicResource SecondaryAccentBrush}"/>
								<ScrollViewer
									Grid.Row="6"
									Grid.Column="0"
									Grid.ColumnSpan="2"
									
									HorizontalScrollBarVisibility="Auto"
									VerticalScrollBarVisibility="Auto"
									
									Margin="16, 3, 0, 0"
									>

									<DataGrid
										KeyboardNavigation.IsTabStop="False"
										KeyboardNavigation.TabNavigation="None"
										KeyboardNavigation.ControlTabNavigation="None"
										KeyboardNavigation.DirectionalNavigation="None"
										KeyboardNavigation.AcceptsReturn="False"
										
										materialDesign:DataGridAssist.CellPadding="4 2 2 2"
										materialDesign:DataGridAssist.ColumnHeaderPadding="4 2 2 2"
										
										Background="Transparent"
										HorizontalGridLinesBrush="{DynamicResource MaterialDesignDivider}"
										
										CanUserAddRows="False"
										AutoGenerateColumns="False"
										
										HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
										
										ScrollViewer.CanContentScroll="True" 
										ScrollViewer.VerticalScrollBarVisibility="Auto"
										ScrollViewer.HorizontalScrollBarVisibility="Auto"
										
										ItemsSource="{Binding CurrentDocument.CurrentSheet.PalletsStatisticsCollectionView}"
										>

										<DataGrid.CellStyle>
											<Style TargetType="{x:Type DataGridCell}">
												<!--
												<Setter Property="Foreground" Value="Black" />
												-->
												<Style.Triggers>
													<Trigger Property="IsSelected" Value="True">
														<Setter Property="Background" Value="{x:Null}" />
														<Setter Property="BorderBrush" Value="{x:Null}" />
													</Trigger>
												</Style.Triggers>
											</Style>
										</DataGrid.CellStyle>

										<DataGrid.Columns>
											<!--INDEX-->
											<DataGridTextColumn
												Binding="{Binding DisplayIndex}"
												Header="#"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

											<!--TYPE-->
											<DataGridTextColumn
												Binding="{Binding DisplayName}"
												Header="Type"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

											<!--Length-->
											<DataGridTextColumn
												Binding="{Binding Length}"
												Header="W"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

											<!--Depth-->
											<DataGridTextColumn
												Binding="{Binding Width}"
												Header="D"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

											<!--Height-->
											<DataGridTextColumn
												Binding="{Binding Height}"
												Header="H"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

											<!--Load-->
											<DataGridTextColumn
												Binding="{Binding Load}"
												Header="W"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

											<!--Count-->
											<DataGridTextColumn
												Binding="{Binding Count}"
												Header="Q"
												IsReadOnly="True"
												ElementStyle="{StaticResource DataGrid_TextBlock_Style}"
												/>

										</DataGrid.Columns>

									</DataGrid>
								</ScrollViewer>

							</Grid>

							<!--Advanced Rack Properties-->
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="auto"/>
								</Grid.ColumnDefinitions>

								<Grid.Style>
									<Style TargetType="{x:Type Grid}">
										<Setter Property="Visibility" Value="Collapsed"/>
										<Style.Triggers>
											<MultiDataTrigger>
												<MultiDataTrigger.Conditions>
													<Condition Binding="{Binding CurrentDocument.ShowAdvancedProperties}" Value="True"/>
													<Condition Binding="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry, Converter={StaticResource ObjectTypeConverter}}" Value="{x:Type dc:Rack}"/>
												</MultiDataTrigger.Conditions>
												<Setter Property="Visibility" Value="Visible"/>
											</MultiDataTrigger>
										</Style.Triggers>
									</Style>
								</Grid.Style>

								<!--
								ADVANCED PROPERTIES TAB HEADER
								-->
								<TextBlock
									Grid.Row="0"
									Grid.Column="0"
									
									Margin="0, 0, 0, 3"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									
									Style="{DynamicResource MaterialDesignHeadlineTextBlock}"
									Foreground="{DynamicResource SecondaryAccentBrush}"
									Text="Advanced properties"/>
								<Button
									Grid.Row="0"
									Grid.Column="1"
									
									Style="{StaticResource PropertiesCommandButtonStyle}"
									ToolTip="Back"
									
									Click="BackToSimplePropertiesButton_Click"
									>
									<materialDesign:PackIcon
										Kind="ArrowLeft"
										Style="{StaticResource PackIcon_Style}"
										/>
								</Button>
								
								<Viewbox
									Grid.Row="1"
									Grid.Column="0"
									Grid.ColumnSpan="2"
									
									VerticalAlignment="Top"
									HorizontalAlignment="Left"
									
									Stretch="Uniform"
									StretchDirection="DownOnly"
									>

									<Grid>
										<Grid.RowDefinitions>
											<RowDefinition Height="auto"/>
											<RowDefinition Height="*"/>
										</Grid.RowDefinitions>

										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="auto"/>
										</Grid.ColumnDefinitions>

										<!--
										DIMENSIONS OF THE SELECTED RACK
										-->
										<TextBlock
											Grid.Row="0"
											Grid.Column="0"
											Grid.ColumnSpan="2"
											
											Style="{DynamicResource MaterialDesignSubheadingTextBlock}"
											Foreground="{DynamicResource SecondaryAccentBrush}"
											FontSize="20"
											
											Margin="0, 0, 0, 0"
											Opacity="0.8"
											
											Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry, Converter={StaticResource RackToAdvancedInfoConverter}, Mode=OneWay}"/>

										<!--
										It is bad idea to set SingleSelectedGeometry as DataContext here.
										Because when you call PropertyChanged for SelectedGeometry from code
										then binding IsChecked="{Binding IsUnderpassAvailable, Mode=TwoWay}" will not be updated.
										But if you use 
										IsChecked="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.IsUnderpassAvailable, Mode=TwoWay}"
										then it will be updated.
										
										DataContext="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry}"
										-->
										<Grid
											Grid.Row="1"
											Grid.Column="0"
											Grid.ColumnSpan="2"
											
											Grid.IsSharedSizeScope="True"
											
											Margin="0, 8, 0, 0">

											<Grid.Resources>

												<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
													<Setter Property="VerticalAlignment" Value="Center"/>
													<Setter Property="Margin" Value="0"/>
												</Style>

												<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
													<Setter Property="VerticalAlignment" Value="Center"/>
												</Style>

												<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
													<Setter Property="VerticalAlignment" Value="Center"/>
												</Style>

												<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
													<Setter Property="VerticalAlignment" Value="Center"/>
												</Style>

											</Grid.Resources>

											<Grid.RowDefinitions>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
												<RowDefinition Height="auto"/>
											</Grid.RowDefinitions>

											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="*"/>
												<ColumnDefinition Width="auto" SharedSizeGroup="AdvancedProperties_ValuesSizeGroup"/>
											</Grid.ColumnDefinitions>

											<!--
											SHOW PALLET
											-->
											<CheckBox
												Grid.Row="0"
												Grid.Column="0"
												
												Content="Show pallet"
												IsChecked="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.ShowPallet, Mode=TwoWay}"/>


											<!--
											UNDERPASS
											MATERIAL ON GROUND
											-->
											<Grid
												Grid.Row="1"
												Grid.Column="0"
												Grid.ColumnSpan="2"
												
												Margin="0, 0, 0, 0"
												>

												<Grid.RowDefinitions>
													<RowDefinition Height="auto"/>
													<RowDefinition Height="auto"/>
													<RowDefinition Height="auto"/>
													<RowDefinition Height="auto"/>
												</Grid.RowDefinitions>

												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="*"/>
													<ColumnDefinition Width="auto" SharedSizeGroup="AdvancedProperties_ValuesSizeGroup"/>
												</Grid.ColumnDefinitions>

												<!--Underpass-->
												<CheckBox
													Grid.Row="0"
													Grid.Column="0"
													IsChecked="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.IsUnderpassAvailable, Mode=TwoWay}"
													Content="Underpass"/>
												<TextBox
													Grid.Row="0"
													Grid.Column="1"
													
													IsEnabled="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.IsUnderpassAvailable}"
													Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.Underpass, Mode=TwoWay}"/>

												<!--Material on ground-->
												<CheckBox
													Grid.Row="1"
													Grid.Column="0"
													Grid.ColumnSpan="2"
													
													Content="Material on ground"
													IsChecked="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.IsMaterialOnGround, Mode=TwoWay}"/>

											</Grid>

											<!--
											LEVELS PROPERTIES
											-->
											<Grid
												Grid.Row="2"
												Grid.Column="0"
												Grid.ColumnSpan="2"
												
												Margin="0, 32, 0, 40"
												>

												<Grid.RowDefinitions>
													<RowDefinition Height="auto"/>
													<RowDefinition Height="auto"/>
													<RowDefinition Height="auto"/>
												</Grid.RowDefinitions>

												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="*"/>
													<ColumnDefinition Width="auto" SharedSizeGroup="AdvancedProperties_ValuesSizeGroup"/>
												</Grid.ColumnDefinitions>

												<!--
												ARE LEVELS THE SAME
												-->
												<CheckBox
													Grid.Row="0"
													Grid.Column="0"
													Grid.ColumnSpan="2"
													
													Content="All levels are same"
													IsChecked="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.AreLevelsTheSame, Mode=TwoWay}"/>

												<!--
												NUMBER OF LEVELS
												-->
												<TextBlock
													Grid.Row="1"
													Grid.Column="0"
													Text="Number of levels"/>
												<ComboBox
													Grid.Row="1"
													Grid.Column="1"
													MaxDropDownHeight="200"
													
													SelectedItem="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.NumberOfLevels_WithoutGround, Mode=TwoWay}"
													ItemsSource="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.NumberOfLevels_Values, Mode=OneWay}"
													/>

												<!--
												LEVELS AND PALLETS PROPERTIES
												-->
												<Grid
													Grid.Row="2"
													Grid.Column="0"
													Grid.ColumnSpan="2"
													
													Margin="0, 3, 0, 0"
													>

													<Grid.RowDefinitions>
														<RowDefinition Height="auto"/>
														<RowDefinition Height="auto"/>
													</Grid.RowDefinitions>

													<!--
													LEVELS TAB
													-->
													<ListBox
														Grid.Row="0"
														
														SelectedValue="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel, Mode=TwoWay}"
														ItemsSource="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.Levels, Mode=OneWay}"
														
														MaxWidth="{Binding Path=ActualWidth, ElementName=LevelContentGrid}"
														HorizontalAlignment="Left"
														>

														<ListBox.ItemsPanel>
															<ItemsPanelTemplate>
																<WrapPanel Orientation="Horizontal"/>
															</ItemsPanelTemplate>
														</ListBox.ItemsPanel>

														<ListBox.ItemContainerStyle>
															<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
																<!--
																Too big padding on Ripple - wrap around ListBoxItemTemplate. Disable it.
																I want draw selection line at ListBoxItem bottom without any padding.
																Look at ItemTemplate.
																-->
																<Setter Property="Padding" Value="0"/>
																<!--
																I dont want to change ListBoxItem background color when it selected.
																But if you look inside default ListBoxItem style - MaterialDesignListBoxItem,
																you wil see that it have Border named "SelectedBorder" with Background={Binding Foreground...}.
																This border is invisible(Opacity=0) by default.
																But when item was selected border's opacity changes to 0.18 inside "Selected" visual state.
																
																For disable changing item background on selection without override ListBoxItem.ControlTemplate
																lets set ListBoxItem.Foreground="Transparent". But all text inside ListBoxItem now will have
																transparent foreground, so return TextBlock.Foreground to MaterialDesign foreground brush inside
																ItemTemplate.
																-->
																<Setter Property="Foreground" Value="Transparent"/>
																<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
															</Style>
														</ListBox.ItemContainerStyle>

														<ListBox.ItemTemplate>
															<DataTemplate DataType="{x:Type dc:DrawingSheet}">
																<Grid>
																	<Grid.RowDefinitions>
																		<RowDefinition Height="auto"/>
																		<RowDefinition Height="auto"/>
																	</Grid.RowDefinitions>

																	<TextBlock
																		Grid.Row="0"
																		
																		Margin="16, 5, 16, 3"
																		HorizontalAlignment="Center"
																		VerticalAlignment="Center"
																		
																		Foreground="{DynamicResource MaterialDesignBody}"
																		MouseLeftButtonDown="SheetTextBlock_MouseLeftButtonDown"
																		Text="{Binding DisplayName, Mode=OneWay}">
																	</TextBlock>

																	<Border
																		Grid.Row="1"
																		
																		Padding="0 5 0 0"
																		CornerRadius="2"
																		>
																		<Border.Style>
																			<Style TargetType="{x:Type Border}">
																				<Setter Property="Background" Value="Transparent"/>
																				<Style.Triggers>
																					<DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
																						<Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}"/>
																					</DataTrigger>
																				</Style.Triggers>
																			</Style>
																		</Border.Style>
																	</Border>
																</Grid>
															</DataTemplate>
														</ListBox.ItemTemplate>

													</ListBox>

													<!--Selected level properties-->
													<!--
													Dont set do it, read comment above.
													
													DataContext="{Binding SelectedLevel}"
													-->
													<Grid
														Grid.Row="1"
														x:Name="LevelContentGrid"
														>

														<Grid.RowDefinitions>
															<RowDefinition Height="auto"/>
															<RowDefinition Height="auto"/>
														</Grid.RowDefinitions>

														<!--Pallet props-->
														<Grid
															Grid.Row="0"
															Grid.IsSharedSizeScope="True">

															<Grid.Style>
																<Style TargetType="{x:Type Grid}">
																	<Setter Property="Visibility" Value="Visible"/>
																	<Style.Triggers>
																		<DataTrigger Binding="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.ShowPallet}" Value="False">
																			<Setter Property="Visibility" Value="Collapsed"/>
																		</DataTrigger>
																	</Style.Triggers>
																</Style>
															</Grid.Style>

															<Grid.RowDefinitions>
																<RowDefinition Height="auto" SharedSizeGroup="PalletPropRow"/>
																<RowDefinition Height="auto" SharedSizeGroup="PalletPropRow"/>
																<RowDefinition Height="auto"/>
																<RowDefinition Height="auto" SharedSizeGroup="PalletPropRow"/>
															</Grid.RowDefinitions>

															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="*"/>
																<ColumnDefinition Width="auto"/>
															</Grid.ColumnDefinitions>

															<!--
															PALLETS ARE EQUAL
															-->
															<CheckBox
																Grid.Row="0"
																Grid.Column="0"
																Grid.ColumnSpan="2"
																
																Content="Pallets are equal"
																IsChecked="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel.PalletsAreEqual}"
																/>

															<!--
															NUMBER OF PALLETS
															-->
															<TextBlock
																Grid.Row="1"
																Grid.Column="0"
																Text="Number of pallets"/>
															<ComboBox
																Grid.Row="1"
																Grid.Column="1"
																
																SelectedValue="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel.NumberOfPallets, Mode=TwoWay}"
																ItemsSource="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel.NumberOfPalletsValues, Mode=OneWay}"/>

															<!--
															PALLETS PROPERTIES
															-->
															<ListView
																Grid.Row="2"
																Grid.Column="0"
																Grid.ColumnSpan="2"
																
																materialDesign:DataGridAssist.ColumnHeaderPadding="3, 2, 3, 2"
																materialDesign:ListViewAssist.ListViewItemPadding="3, 0, 3, 0"
																ItemsSource="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel.PalletsCollectionView}"
																>
																<ListView.ItemContainerStyle>
																	<Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource MaterialDesignGridViewItem}">
																		<Setter Property="VerticalContentAlignment" Value="Center"/>
																	</Style>
																</ListView.ItemContainerStyle>
																<ListView.View>
																	<GridView>
																		<!--
																		INDEX
																		-->
																		<GridViewColumn
																			Header="#"
																			>
																			<GridViewColumn.CellTemplate>
																				<DataTemplate>
																					<TextBlock
																						VerticalAlignment="Center"
																						>
																						<TextBlock.Style>
																							<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
																								<Setter Property="Text" Value="{Binding DisplayIndex}"/>
																								<!--
																								if pallets are equal then dont display pallet index because only one pallet is displayed
																								-->
																								<Style.Triggers>
																									<DataTrigger Binding="{Binding Path=DataContext.CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel.PalletsAreEqual,
																										RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
																												Value="True">
																										<Setter Property="Text" Value=""/>
																									</DataTrigger>
																								</Style.Triggers>
																							</Style>
																						</TextBlock.Style>
																					</TextBlock>
																				</DataTemplate>
																			</GridViewColumn.CellTemplate>
																		</GridViewColumn>

																		<!--
																		LENGTH
																		-->
																		<GridViewColumn
																			Header="W(mm)"
																			>
																			<GridViewColumn.CellTemplate>
																				<DataTemplate>
																					<TextBox
																						Style="{StaticResource GridTextBox}"
																						Text="{Binding Length}"
																						/>
																				</DataTemplate>
																			</GridViewColumn.CellTemplate>
																		</GridViewColumn>

																		<!--
																		DEPTH
																		-->
																		<GridViewColumn
																			Header="D(mm)"
																			>
																			<GridViewColumn.CellTemplate>
																				<DataTemplate>
																					<TextBox
																						Style="{StaticResource GridTextBox}"
																						Text="{Binding Width}"
																						/>
																				</DataTemplate>
																			</GridViewColumn.CellTemplate>
																		</GridViewColumn>

																		<!--
																		HEIGHT
																		-->
																		<GridViewColumn
																			Header="H(mm)"
																			>
																			<GridViewColumn.CellTemplate>
																				<DataTemplate>
																					<TextBox
																						Style="{StaticResource GridTextBox}"
																						Text="{Binding Height}"
																						/>
																				</DataTemplate>
																			</GridViewColumn.CellTemplate>
																		</GridViewColumn>

																		<!--
																		CAPACITY
																		-->
																		<GridViewColumn
																			Header="Cap(kg)"
																			>
																			<GridViewColumn.CellTemplate>
																				<DataTemplate>
																					<TextBox
																						Style="{StaticResource GridTextBox}"
																						Text="{Binding Load}"
																						/>
																				</DataTemplate>
																			</GridViewColumn.CellTemplate>
																		</GridViewColumn>

																		<!--
																		PALLET CONFIGURATION
																		-->
																		<GridViewColumn
																			Header="PC"
																			Width="50"
																			>
																			<GridViewColumn.CellTemplate>
																				<DataTemplate>
																					<ComboBox
																						Style="{StaticResource GridComboBox}"
																						SelectedValue="{Binding PalletConfiguration, Mode=TwoWay}"
																						ItemsSource="{Binding Level.Owner.Sheet.Document.PalletConfigurationCollView}"
																						Background="{DynamicResource AppCardBackground}"
																						>
																						<ComboBox.ItemTemplate>
																							<DataTemplate>
																								<Grid>
																									<Grid.ColumnDefinitions>
																										<ColumnDefinition Width="Auto"/>
																										<ColumnDefinition Width="Auto"/>
																										<ColumnDefinition Width="Auto"/>
																									</Grid.ColumnDefinitions>

																									<TextBlock
																										Grid.Column="0"
																										VerticalAlignment="Center"
																										Text="{Binding DisplayName}"
																										/>
																								</Grid>
																							</DataTemplate>
																						</ComboBox.ItemTemplate>
																					</ComboBox>
																				</DataTemplate>
																			</GridViewColumn.CellTemplate>
																		</GridViewColumn>

																		<!--
																		COMMANDS
																		-->
																		<GridViewColumn>
																			<GridViewColumn.CellTemplate>
																				<DataTemplate>
																					<ItemsControl
																						ItemsSource="{Binding ., Converter={StaticResource PalletCommandsConverter}}"
																						ItemTemplateSelector="{StaticResource CommandsToolbarTemplateSelector}"
																						>
																						<ItemsControl.ItemTemplate>
																							<DataTemplate>
																								<Button
																									Style="{StaticResource CommandButtonStyle}"
																									ToolTip="{Binding Description}"
																									Foreground="{DynamicResource PrimaryHueMidBrush}"
																									
																									Margin="0"
																									Command="{Binding .}"
																									CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=DataContext}"
																									>
																									<materialDesign:PackIcon Kind="{Binding IconKind}"/>
																								</Button>
																							</DataTemplate>
																						</ItemsControl.ItemTemplate>
																						<ItemsControl.ItemsPanel>
																							<ItemsPanelTemplate>
																								<StackPanel Orientation="Horizontal"/>
																							</ItemsPanelTemplate>
																						</ItemsControl.ItemsPanel>
																					</ItemsControl>
																				</DataTemplate>
																			</GridViewColumn.CellTemplate>
																		</GridViewColumn>
																	</GridView>
																</ListView.View>
															</ListView>

														</Grid>

														<!--Level props-->
														<Grid
															Grid.Row="0">

															<Grid.Style>
																<Style TargetType="{x:Type Grid}">
																	<Setter Property="Visibility" Value="Visible"/>
																	<Style.Triggers>
																		<DataTrigger Binding="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.ShowPallet}" Value="True">
																			<Setter Property="Visibility" Value="Collapsed"/>
																		</DataTrigger>
																	</Style.Triggers>
																</Style>
															</Grid.Style>

															<Grid.RowDefinitions>
																<RowDefinition Height="auto"/>
																<RowDefinition Height="auto"/>
															</Grid.RowDefinitions>

															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="*"/>
																<ColumnDefinition Width="auto"/>
															</Grid.ColumnDefinitions>

															<TextBlock
																Grid.Row="0"
																Grid.Column="0"
																Text="Level height"/>
															<TextBox
																Grid.Row="0"
																Grid.Column="1"
																Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel.LevelHeight, Mode=TwoWay}">
																<TextBox.Style>
																	<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
																		<Setter Property="IsReadOnly" Value="False"/>
																		<Setter Property="IsEnabled" Value="True"/>
																		<Style.Triggers>
																			<DataTrigger Binding="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel.IsItLastLevel}" Value="True">
																				<Setter Property="IsReadOnly" Value="True"/>
																				<Setter Property="IsEnabled" Value="False"/>
																			</DataTrigger>
																		</Style.Triggers>
																	</Style>
																</TextBox.Style>
															</TextBox>

															<TextBlock
																Grid.Row="1"
																Grid.Column="0"
																Text="Level load(kg)"/>
															<TextBox
																Grid.Row="1"
																Grid.Column="1"
																Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SelectedLevel.LevelLoad, Mode=TwoWay}"/>
														</Grid>

														<Button
															Grid.Row="1"
															
															Margin="0, 3, 0, 0"
															Content="Level Accessories"
															Click="LevelAccessoriesButton_Click"
															/>

													</Grid>

												</Grid>
											</Grid>

											<!--
											RACK LOAD
											-->
											<TextBlock
												Grid.Row="3"
												Grid.Column="0"
												Text="Rack load(kg)"/>
											<TextBox
												Grid.Row="3"
												Grid.Column="1"
												IsEnabled="False"
												IsReadOnly="True"
												Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.RackLoad, Mode=OneWay}"/>

											<!--
											RACK WEIGHT
											-->
											<!--
											<TextBlock
												Grid.Row="4"
												Grid.Column="0"
												Text="Rack weight(kg)"/>
											<TextBox
												Grid.Row="4"
												Grid.Column="1"
												IsEnabled="False"
												IsReadOnly="True"
												Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.RackWeight, Mode=OneWay, StringFormat=N2}"/>
											-->

											<!--
											CLEAR AVAILABLE HEIGHT
											-->
											<TextBlock
												Grid.Row="5"
												Grid.Column="0"
												Text="Clear available height"/>
											<TextBox
												Grid.Row="5"
												Grid.Column="1"
												IsEnabled="False"
												Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.ClearAvailableHeight, Mode=OneWay}"/>

											<!--
											COLUMN
											-->
											<Grid
												Grid.Row="6"
												Grid.Column="0"
												Grid.ColumnSpan="2"
												
												Margin="0, 0, 0, 0"
												>

												<Grid.RowDefinitions>
													<RowDefinition Height="auto"/>
													<RowDefinition Height="auto"/>
												</Grid.RowDefinitions>

												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="*"/>
													<ColumnDefinition Width="auto" SharedSizeGroup="AdvancedProperties_ValuesSizeGroup"/>
												</Grid.ColumnDefinitions>

												<TextBlock
													Grid.Row="0"
													Grid.Column="0"
													
													Text="Column"
													/>
												<ComboBox
													Grid.Row="0"
													Grid.Column="1"
													
													SelectedItem="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.Column, Mode=TwoWay}"
													ItemsSource="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.ColumnsCollection, Mode=OneWay}"
													Template="{StaticResource NewInterface_ComboBoxTemplate}"
													>
													<ComboBox.ItemTemplate>
														<DataTemplate>
															<Grid>
																<TextBlock Text="{Binding DisplayName, Mode=OneWay}"/>
															</Grid>
														</DataTemplate>
													</ComboBox.ItemTemplate>
												</ComboBox>


												<!--
												Hide split column
												-->
												<CheckBox
													Grid.Row="1"
													Grid.Column="0"
													
													Content="Split column"
													IsChecked="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SplitColumn, Mode=TwoWay}"
													IsEnabled="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry, Converter={StaticResource CanSplitColumnConverter}, Mode=OneWay}"
													Visibility="Collapsed"
													/>

												<Grid
													Grid.Row="1"
													Grid.Column="1"
													Visibility="Collapsed"
													>

													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="auto"/>
														<ColumnDefinition Width="auto"/>
													</Grid.ColumnDefinitions>

													<TextBox
														Grid.Column="0"
														
														Margin="0, 0, 16, 0"
														Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.Column_FirstPartLength, Mode=TwoWay}">
														<TextBox.Style>
															<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
																<Setter Property="IsEnabled" Value="False"/>
																<Style.Triggers>
																	<DataTrigger Binding="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SplitColumn}" Value="True">
																		<Setter Property="IsEnabled" Value="True"/>
																	</DataTrigger>
																</Style.Triggers>
															</Style>
														</TextBox.Style>
													</TextBox>

													<TextBox
														Grid.Column="1"
														
														Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.Column_SecondPartLength, Mode=TwoWay}">
														<TextBox.Style>
															<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
																<Setter Property="IsEnabled" Value="False"/>
																<Style.Triggers>
																	<DataTrigger Binding="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.SplitColumn}" Value="True">
																		<Setter Property="IsEnabled" Value="True"/>
																	</DataTrigger>
																</Style.Triggers>
															</Style>
														</TextBox.Style>
													</TextBox>
												</Grid>
											</Grid>

											<!--
											BRACING
											-->
											<TextBlock
												Grid.Row="7"
												Grid.Column="0"
												Text="Bracing"/>
											<TextBox
												Grid.Row="7"
												Grid.Column="1"
												
												IsEnabled="False"
												Text="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.BracingDisplayName, Mode=OneWay}"/>

											<!--
											BRACING TYPE - GI or POWDER COATED
											-->
											<TextBlock
												Grid.Row="8"
												Grid.Column="0"
												Text="Bracing Material"/>
											<ComboBox
												Grid.Row="8"
												Grid.Column="1"
												
												SelectedValue="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.BracingType, Converter={StaticResource BracingTypeConverter}}"
												ItemsSource="{Binding CurrentDocument.CurrentSheet.SingleSelectedGeometry.BracingTypeList, Mode=OneWay}"
												>
											</ComboBox>

											<!--
											RACK ACCESSORTIES button
											-->
											<Button
												Grid.Row="9"
												Grid.Column="0"
												Grid.ColumnSpan="2"
												
												Margin="3"
												Content="Rack Accessories"
												Click="RackAccessoriesButton_Click"
												/>

										</Grid>
									</Grid>

								</Viewbox>
							</Grid>

						</Grid>

					</Expander>

				</materialDesign:Card>

				<materialDesign:Card
					Grid.Row="0"
					Grid.Column="1"
					
					Margin="6, 0, 0, 0"
					>

					<StackPanel
						Orientation="Vertical">

						<StackPanel.Resources>
							<Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
								<Setter Property="Padding" Value="10, 5, 10, 5"/>

								<Setter Property="BorderBrush" Value="Transparent"/>
								<Setter Property="Background" Value="Transparent"/>
								<Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>

								<Setter Property="IsEnabled" Value="True"/>

								<Style.Triggers>
									<DataTrigger Binding="{Binding CurrentDocument.IsInCommand}" Value="True">
										<Setter Property="IsEnabled" Value="False"/>
									</DataTrigger>

									<DataTrigger Binding="{Binding CurrentDocument.ShowAdvancedProperties}" Value="True">
										<Setter Property="IsEnabled" Value="False"/>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</StackPanel.Resources>

						<Button
							Click="BlockButton_Click"
							Content="B"
							ToolTip="Block"
							/>
						<Button
							Click="ColumnButton_Click"
							Content="C"
							ToolTip="Column"
							/>
						<Button
							Click="RackButton_Click"
							Content="R"
							ToolTip="Rack"
							/>
						<Button
							Click="AisleSpaceButton_Click"
							Content="AS"
							ToolTip="Aisle Space"/>
						<Button
							Click="ShutterButton_Click"
							Content="S"
							ToolTip="Shutter"/>
						<Button
							Click="WallButton_Click"
							Content="W"
							ToolTip="Wall"
							/>

					</StackPanel>

				</materialDesign:Card>

			</Grid>

			<!--
			DISPLAY ERROR
			-->
			<materialDesign:Snackbar
				Grid.Row="1"
				Grid.Column="1"
				
				Background="{DynamicResource ValidationErrorBrush}"
				Foreground="{DynamicResource ValidationErrorForeground}"
				>
				<materialDesign:Snackbar.Style>
					<Style TargetType="{x:Type materialDesign:Snackbar}" BasedOn="{StaticResource {x:Type materialDesign:Snackbar}}">
						<Setter Property="IsActive" Value="False"/>
						<Setter Property="Visibility" Value="Collapsed"/>
						<Style.Triggers>
							<DataTrigger Binding="{Binding CurrentDocument.DocumentError, Mode=OneWay, Converter={StaticResource NullEmptyStringConverter}}" Value="False">
								<Setter Property="IsActive" Value="True"/>
								<Setter Property="Visibility" Value="Visible"/>
							</DataTrigger>
						</Style.Triggers>
					</Style>
				</materialDesign:Snackbar.Style>
				<materialDesign:SnackbarMessage
					Content="{Binding CurrentDocument.DocumentError, Mode=OneWay}"
					/>
			</materialDesign:Snackbar>

		</Grid>
	</materialDesign:DialogHost>
</Window>