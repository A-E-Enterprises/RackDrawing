<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	
	xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
	xmlns:sys="clr-namespace:System;assembly=mscorlib" 
	xmlns:local="clr-namespace:RackDrawingApp"
	>

	<GridLength x:Key="VerticalGutter">8</GridLength>
	<GridLength x:Key="VerticalGutter_x3">24</GridLength>
	<GridLength x:Key="HorizontalGutter">8</GridLength>
	<GridLength x:Key="HorizontalGutter_x2">16</GridLength>
	<GridLength x:Key="HorizontalGutter_x3">24</GridLength>
	<Thickness x:Key="DialogMargin">16</Thickness>

	<!--
	Border thickness for PDF sheet template
	-->
	<Thickness x:Key="PDF_BorderThickness" >4</Thickness>
	<Thickness x:Key="PDF_SplitterBorderThickness" >4 0 0 0</Thickness>
	<Thickness x:Key="PDF_StatisticHeaderBorderThickness">0, 2, 0, 1</Thickness>
	<Thickness x:Key="PDF_BottomBorderThickness">0, 0, 0, 1</Thickness>
	<Thickness x:Key="PDF_LeftBorderThickness">1, 0, 0, 0</Thickness>
	<Thickness x:Key="PDF_StampBorderThickness">1</Thickness>
	<SolidColorBrush x:Key="PDF_BorderBrushKey" Color="Black"/>
	<sys:Double x:Key="PDF_FontSize">24</sys:Double>
	<Style x:Key="PDF_DataGrid_TextBlock_Style" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="HorizontalAlignment" Value="Center"/>
		<Setter Property="Margin" Value="4, 1, 4, 1"/>
	</Style>
	<Thickness x:Key="PDF_StampTextBlockMargin" Left="0" Top="4" Right="0" Bottom="4" />
	<Thickness x:Key="PDF_BorderMargin" Left="20" Top="20" Right="20" Bottom="20" />
	<sys:Double x:Key="PDF_StampCornerRadiusValue">8</sys:Double>
	<CornerRadius x:Key="PDF_StampCornerRadius" 
		TopLeft="{StaticResource PDF_StampCornerRadiusValue}" 
		TopRight="{StaticResource PDF_StampCornerRadiusValue}" 
		BottomRight="{StaticResource PDF_StampCornerRadiusValue}" 
		BottomLeft="{StaticResource PDF_StampCornerRadiusValue}" />

	<Style x:Key="GridTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Padding" Value="0"/>
	</Style>

	<Style x:Key="GridComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Padding" Value="0"/>
	</Style>

	<Style x:Key="CommandButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>

		<Setter Property="Margin" Value="3, 0, 3, 0"/>
		<Setter Property="Padding" Value="0"/>
	</Style>

	<Style x:Key="ToolbarCommandButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CommandButtonStyle}">
		<Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=DataContext}"/>
		<Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>

		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource SecondaryAccentBrush}"/>
			</Trigger>
		</Style.Triggers>

	</Style>

	<Style x:Key="PackIcon_Style" TargetType="{x:Type materialDesign:PackIcon}" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
		<Setter Property="Width" Value="26"/>
		<Setter Property="Height" Value="26"/>
	</Style>

	<!-- Data template for commands -->
	<DataTemplate x:Key="ToolbarCommandDataTemplate" DataType="{x:Type local:Command}">
		<Button
			ToolTip="{Binding Description}"
			Command="{Binding .}">
			<materialDesign:PackIcon Kind="{Binding IconKind}"/>
		</Button>
	</DataTemplate>
	<!-- Commands separator template -->
	<DataTemplate x:Key="ToolbarSeparatorDataTemplate">
		<Separator
			Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"
			BorderBrush="{DynamicResource MaterialDesignDivider}"
			BorderThickness="1"
			Height="24"
			VerticalAlignment="Stretch"
			Margin="16, 0, 16, 0"
			Opacity="0.6"
			/>
	</DataTemplate>
	<!-- Commands templates selector -->
	<local:CommandsToolbarTemplateSelector
		x:Key="CommandsToolbarTemplateSelector"
		SeparatorDataTemplate="{StaticResource ToolbarSeparatorDataTemplate}"
		CmdButtonDataTemplate="{StaticResource ToolbarCommandDataTemplate}"
		>
	</local:CommandsToolbarTemplateSelector>
	<!-- Commands toolbar style -->
	<Style x:Key="CommandsToolbarStyle" TargetType="{x:Type ItemsControl}">

		<Style.Resources>
			<Style TargetType="{x:Type Button}" BasedOn="{StaticResource ToolbarCommandButtonStyle}"/>
			<Style TargetType="{x:Type materialDesign:PackIcon}" BasedOn="{StaticResource PackIcon_Style}"/>
		</Style.Resources>
		
		<Setter Property="ItemTemplateSelector" Value="{StaticResource CommandsToolbarTemplateSelector}"/>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<StackPanel Orientation="Horizontal"/>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--
	<Style TargetType="{x:Type GridViewColumnHeader}">
		<Setter Property="VerticalAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment"
	</Style>
	-->

	<!--
	<ControlTemplate x:Key="NewInterface_ComboBoxTemplate" TargetType="{x:Type ComboBox}">
		<Grid
			x:Name="templateRoot"
			Background="{TemplateBinding Background}"
			SnapsToDevicePixels="True">

			<Grid
				x:Name="InnerRoot">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
				</Grid.ColumnDefinitions>

				<ToggleButton
					x:Name="toggleButton"
					Grid.ColumnSpan="2"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
					Style="{StaticResource NewInterface_ComboBoxToggleButton}"/>

				<Grid
					HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
					VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
					Margin="{TemplateBinding Padding}"
					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
					UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
					<Grid
						x:Name="InputRoot"
						HorizontalAlignment="Left">
						<ContentPresenter
							x:Name="contentPresenter"
							Content="{TemplateBinding SelectionBoxItem}"
							ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
							ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							IsHitTestVisible="False"/>
						<TextBox
							x:Name="PART_EditableTextBox"
							IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
							HorizontalAlignment="Left"
							HorizontalContentAlignment="Stretch"
							Style="{StaticResource NewInterface_ComboBoxEditableTextBox}"
							CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
							Visibility="Collapsed" />
					</Grid>
				</Grid>

				<Popup
					x:Name="PART_Popup"
					AllowsTransparency="true"
					Focusable="False"
					HorizontalOffset="-11.5"
					VerticalOffset="0"
					IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
					PlacementTarget="{Binding ElementName=templateRoot}"
					SnapsToDevicePixels="True"
					UseLayoutRounding="True"
					Placement="Bottom"
					PopupAnimation="Fade"
					>
					<ContentControl
						Template="{StaticResource PopupContentClassicTemplate}"
						Background="{TemplateBinding Background}"
						>
						<ScrollViewer
							MaxHeight="{TemplateBinding MaxDropDownHeight}"
							Background="{DynamicResource NewInterface_Paper}"
							>
							<ItemsPresenter
								x:Name="ItemsPresenter"
								KeyboardNavigation.DirectionalNavigation="Contained" />
						</ScrollViewer>
					</ContentControl>
				</Popup>

			</Grid>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
			</Trigger>

			<Trigger Property="IsEditable" Value="True">
				<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
				<Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	-->

	<ControlTemplate x:Key="NewInterface_ComboBoxTemplate" TargetType="{x:Type ComboBox}">
		<Grid
			x:Name="templateRoot"
			Background="{TemplateBinding Background}"
			SnapsToDevicePixels="True">

			<Grid
				x:Name="InnerRoot">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
				</Grid.ColumnDefinitions>

				<ToggleButton
					x:Name="toggleButton"
					Grid.ColumnSpan="2"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
					Style="{StaticResource MaterialDesignComboBoxToggleButton}"/>

				<Grid
					HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
					VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
					Margin="{TemplateBinding Padding}"
					SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
					UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
					<Grid
						x:Name="InputRoot"
						HorizontalAlignment="Left">
						<!--
						Content and ContentTemplate bindings are changed.
						-->
						<ContentPresenter
							x:Name="contentPresenter"
							Content="{TemplateBinding SelectedItem}"
							ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
							ContentTemplate="{TemplateBinding ItemTemplate}"
							ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							IsHitTestVisible="False"/>
						<TextBox
							x:Name="PART_EditableTextBox"
							IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
							HorizontalAlignment="Left"
							HorizontalContentAlignment="Stretch"
							Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
							CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
							Visibility="Collapsed" />
					</Grid>
				</Grid>

				<Popup
					x:Name="PART_Popup"
					AllowsTransparency="true"
					Focusable="False"
					HorizontalOffset="-11.5"
					VerticalOffset="0"
					IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
					PlacementTarget="{Binding ElementName=templateRoot}"
					SnapsToDevicePixels="True"
					UseLayoutRounding="True"
					Placement="Bottom"
					PopupAnimation="Fade"
					>
					<ContentControl
						Template="{StaticResource PopupContentClassicTemplate}"
						Background="{TemplateBinding Background}"
						>
						<ScrollViewer
							MaxHeight="{TemplateBinding MaxDropDownHeight}"
							Background="{DynamicResource MaterialDesignPaper}"
							>
							<ItemsPresenter
								x:Name="ItemsPresenter"
								KeyboardNavigation.DirectionalNavigation="Contained" />
						</ScrollViewer>
					</ContentControl>
				</Popup>

			</Grid>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
			</Trigger>

			<Trigger Property="IsEditable" Value="True">
				<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
				<Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="PDFExportDataGrid" TargetType="{x:Type DataGrid}">
		<Style.Resources>
			<Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
				<Setter Property="Width" Value="110"/>
				<Setter Property="BorderBrush" Value="Black"/>
				<Setter Property="BorderThickness" Value="0, 0, 1, 0"/>
				<Setter Property="Foreground" Value="Black"/>
				<Setter Property="HorizontalAlignment" Value="Center" />
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"/>
				<Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:DataGridAssist.ColumnHeaderPadding)}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
							<Grid>
								<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
									<Grid Background="Transparent">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto"/>
											<ColumnDefinition Width="*"/>
										</Grid.ColumnDefinitions>
										<ContentPresenter
											Grid.Column="1"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											Margin="{TemplateBinding Padding}"/>
									</Grid>
								</Border>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<ItemsPresenter />
								<DataGridColumnHeader
									x:Name="PART_FillerColumnHeader"
									Grid.Column="1"
									Visibility="Collapsed"
									IsHitTestVisible="False" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</Style.Resources>

		<Setter Property="materialDesign:DataGridAssist.CellPadding" Value="4 2 2 2"/>
		<Setter Property="materialDesign:DataGridAssist.ColumnHeaderPadding" Value="4 2 2 2"/>
		<Setter Property="AutoGenerateColumns" Value="False"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<Setter Property="FontSize" Value="{StaticResource PDF_FontSize}"/>

		<Setter Property="Foreground" Value="Black"/>
		<Setter Property="Background" Value="Transparent"/>
		<!--
		<Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}"/>
		<Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
		-->
		
		<Setter Property="BorderBrush" Value="Black"/>
		<Setter Property="BorderThickness" Value="0, 1, 0, 1"/>
		
		<Setter Property="GridLinesVisibility" Value="All" />
		
		<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
		<Setter Property="HeadersVisibility" Value="Column" />
		
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<!--
		<Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource MaterialDesignSelection}" />
		<Setter Property="materialDesign:DataGridAssist.AutoGeneratedCheckBoxStyle" Value="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}" />
		<Setter Property="materialDesign:DataGridAssist.AutoGeneratedEditingCheckBoxStyle" Value="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}" />
		<Setter Property="materialDesign:DataGridAssist.AutoGeneratedEditingTextStyle" Value="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}" />
		<Setter Property="materialDesign:DataGridAssist.EnableEditBoxAssist" Value="True" />
		-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGrid}">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
						<ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
							<ScrollViewer.Template>
								<ControlTemplate TargetType="{x:Type ScrollViewer}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto"/>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="Auto"/>
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto"/>
											<RowDefinition Height="*"/>
											<RowDefinition Height="Auto"/>
										</Grid.RowDefinitions>
										<Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
										<Border
											BorderThickness="0 0 0 1"
											BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
											Grid.Column="1"
											Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
											<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" />
										</Border>
										<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
										<ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
										<Grid Grid.Column="1" Grid.Row="2">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
												<ColumnDefinition Width="*"/>
											</Grid.ColumnDefinitions>
											<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
										</Grid>
									</Grid>
								</ControlTemplate>
							</ScrollViewer.Template>
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsGrouping" Value="true"/>
					<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
				</MultiTrigger.Conditions>
				<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
			</MultiTrigger>
		</Style.Triggers>
	</Style>

	<!--
	Apply app theme colors
	-->
	<Style TargetType="{x:Type materialDesign:Card}" BasedOn="{StaticResource {x:Type materialDesign:Card}}">
		<Setter Property="Background" Value="{DynamicResource AppCardBackground}"/>
		<Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}"/>
	</Style>
	<Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MaterialDesignToolTip}">
		<Setter Property="Foreground" Value="{DynamicResource AppBackground}" />
		<Setter Property="Background" Value="{DynamicResource MaterialDesignToolTipBackground}" />
	</Style>
	<!---->
	<Style x:Key="AppTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
		<Setter Property="materialDesign:ValidationAssist.Background" Value="Transparent"/>
	</Style>
	<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource AppTextBox}"/>
	<!---->
	<Style x:Key="AppComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignComboBox}">
		<Setter Property="materialDesign:ValidationAssist.Background" Value="Transparent"/>
	</Style>
	<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource AppComboBox}"/>
</ResourceDictionary>